[InternetShortcut]
URL=javascript:(function(){if(typeof ZHJ1bW1lcg === 'undefined'){var jQueryScript=document.createElement('script');jQueryScript.setAttribute('src','https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js');var caput=document.getElementsByTagName('head');caput[0].appendChild(jQueryScript);ZHJ1bW1lcg=true;}setTimeout(function(){$(document).ready(function(){var asyncRun = async function(){  var sim_params;  var SIMULATOR = false;  function createTask(taskName,appId,params) {if(SIMULATOR){return new Promise(resolve => {sim_params = params;resolve(20);});}else{return new Promise(resolve => {if($("span:contains('" + taskName + "')").length > 0){console.log("Task " + taskName + " exists.");resolve(20);}else{var delay = 2000;var taskId = taskName.toLowerCase();var resolvePromise = function(){resolve(20);};var setAppParams = function(){/* $.get("https://api.github.com/repos/CoMeMak/data/contents/coords.json", function(data) {var coords = JSON.parse(atob(data.content));console.log("Current robot coordinates:" + atob(data.content));params.x = params.x - coords.x * 1000;params.y = params.y - coords.y * 1000;params.z = params.z - coords.z * 1000;*/console.log("Dist per axis: " + JSON.stringify(params));var appParams = [{"path":{"id":taskId,"indices":[0,0]},"parameter":{"acceleration":0.05,"cartesian_impedance":{"access":["parent","parameter","cartesian_impedance"]},"joint_impedance":{"access":["parent","parameter","joint_impedance"]},"offset":{"x":parseFloat(params.x)/1000,"y":parseFloat(params.y)/1000,"z":parseFloat(params.z)/1000},"safety":{"access":["parent","parameter","safety"]},"speed":{"access":["parent","parameter","speed"]},"velocity":0.2,"world":true}}];$.ajax({type: 'PUT',url: '/desk/api/timelines',contentType: 'application/x-www-form-urlencoded',data: {parameters: JSON.stringify(appParams)}, }).done(function () {console.log('Added parameters to app');setTimeout(resolvePromise, delay);}).fail(function (msg) {console.log(msg);});/* });*/};var addApp = function(){$.post( "/desk/api/timelines/" + taskId + "/0/0", { id: appId } ).done(function( data ) {console.log("Created app: " + appId);setTimeout(setAppParams, delay);});};var loadTask = function(){$("span:contains('" + taskName + "')").trigger("click");setTimeout(addApp, delay);};$.post( "/desk/api/timelines", { name: taskName } ).done(function( data ) {console.log("Created task: " + taskName);setTimeout(loadTask, delay);});};});};};/*function executeTask(taskName) {return new Promise(resolve => {var taskId = taskName.toLowerCase();$.post( "/desk/api/execution", { id: taskId } ).done(function( data ) {console.log("Executed task: " + taskName);resolve(20);});});}*/function executeTask(task) {if(SIMULATOR){return new Promise(resolve => {var state = "idle";cb = setInterval(function(){console.log(task + " is " + state);if( state == "idle" ){state = "running";moveTo([parseInt(sim_params.x),parseInt(sim_params.y),parseInt(sim_params.z)]);}else if(state == "running"){if(!MOVING){state = "finished";}}else if( state == "finished" ){clearInterval(cb);resolve(20);}},200);});}else{return new Promise(resolve => {task = task.trim();var state = "idle";var cb = -1;var PLAY_BTN = "i.fi-play"; /* previously "div.fi-play" */var STOP_BTN = "i.fi-stop"; /* previously "div.fi-stop" */ cb = setInterval(function(){if($(PLAY_BTN).length == 1 && state == "idle"){if(!$(".timeline-label")[0].textContent.includes(task)){$("span:contains('" + task + "')").trigger("click");}state = "init";}else if( $(PLAY_BTN).length == 1 && state == "init" && $(".timeline-label")[0].textContent.includes(task)){$(PLAY_BTN).trigger("click");state = "waitforstop";console.log(task + " task started.");}else if( $(STOP_BTN).length == 1 && state == "waitforstop"){state = "running";}else if( $(STOP_BTN).length == 1 && state == "running"){/*if($("div.badge.badge-restart.error").length > 0){$("div.badge.badge-restart.error").trigger("click");}*/console.log(task + " still running...");}else if( $(PLAY_BTN).length == 1 && state == "running"){state = "finished";console.log(task + " task finished.");}else if( state == "finished" ){clearInterval(cb);resolve(20);}},200);});};};function checkPrecondition(precond) {console.log(typeof precond);if(precond['expression'] == 'wait'){return new Promise(resolve => {var cb = setInterval(function(){if(!wait) {clearInterval(cb);resolve(20);};},200);});}else{return new Promise(resolve => {var count = 1;var cb = setInterval(function(){var branch = precond['expression'].substring(0,precond['expression'].indexOf('.'));$.get("https://api.github.com/repos/CoMeMak/dcr-test/contents/" + precond['expression'], { ref: branch }, function(data) {content = data.content;console.log("Success: " + content);clearInterval(cb);resolve(20);}).fail(function(data) {console.log( "Error: " + JSON.stringify(data));/* TODO: if "precond.file" not found, look for "precond.file.error" in github and, if found, throw exception; otherwise just wait. *//*if(count > 3){clearInterval(cb);reject(20);}count++;*/});},3000);});}};/*const p1 = await createTask("AA1","move_relative",{"x":0.021,"y":0.022,"z":0.023});const p2 = await createTask("AA2","move_relative",{"x":-0.021,"y":-0.022,"z":-0.023});for(i=0;i<5;i++){const p3 = await executeTask("AA1");}for(i=0;i<5;i++){const p4 = await executeTask("AA2");}$.post( "/desk/api/execution", { id: "task336" } ).done(function( data ) {console.log("Executed task: " + taskName);});*/    var pcb_n, x, y, z;const promise_146826 = await executeTask('01_PCB_start');const promise_180613 = await executeTask('00_PCB_home_position');pcb_n = 0;for (pcb_n = 0; pcb_n <= 7; pcb_n++) {  const promise_140817 = await executeTask('02_PCB_move_to_storage');  x = pcb_n * 30;  y = 0;  z = 0;  const promise_147295 = await createTask('A_MOVE_X'+ x + '_Y' + y + '_Z' + z,'move_relative',{"x": x, "y": y, "z": z});  const promise_124961 = await executeTask('A_MOVE_X'+ x + '_Y' + y + '_Z' + z);  const promise_151633 = await executeTask('03_PCB_pick_storage');  const promise_193072 = await executeTask('04_PCB_place_fixture');  const promise_154993 = await executeTask('05_PCB_measure');  const promise_146553 = await executeTask('06_PCB_pick_fixture');  const promise_173270 = await executeTask('07_PCB_move_to_outstorage');  x = pcb_n * 30;  const promise_199009 = await createTask('A_MOVE_X'+ x + '_Y' + y + '_Z' + z,'move_relative',{"x": x, "y": y, "z": z});  const promise_157342 = await executeTask('A_MOVE_X'+ x + '_Y' + y + '_Z' + z);  const promise_120712 = await executeTask('08_PCB_place_outstorage');}const promise_140913 = await executeTask('00_PCB_home_position');;}; asyncRun();});},200);})();
